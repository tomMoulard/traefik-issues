# HELP go_gc_duration_seconds A summary of the pause duration of garbage collection cycles.
# TYPE go_gc_duration_seconds summary
go_gc_duration_seconds{quantile="0"} 4.0882e-05
go_gc_duration_seconds{quantile="0.25"} 9.1211e-05
go_gc_duration_seconds{quantile="0.5"} 0.00017392
go_gc_duration_seconds{quantile="0.75"} 0.000185014
go_gc_duration_seconds{quantile="1"} 0.000208218
go_gc_duration_seconds_sum 0.000699245
go_gc_duration_seconds_count 5
# HELP go_goroutines Number of goroutines that currently exist.
# TYPE go_goroutines gauge
go_goroutines 40
# HELP go_info Information about the Go environment.
# TYPE go_info gauge
go_info{version="go1.17.7"} 1
# HELP go_memstats_alloc_bytes Number of bytes allocated and still in use.
# TYPE go_memstats_alloc_bytes gauge
go_memstats_alloc_bytes 7.59352e+06
# HELP go_memstats_alloc_bytes_total Total number of bytes allocated, even if freed.
# TYPE go_memstats_alloc_bytes_total counter
go_memstats_alloc_bytes_total 1.8529384e+07
# HELP go_memstats_buck_hash_sys_bytes Number of bytes used by the profiling bucket hash table.
# TYPE go_memstats_buck_hash_sys_bytes gauge
go_memstats_buck_hash_sys_bytes 1.459141e+06
# HELP go_memstats_frees_total Total number of frees.
# TYPE go_memstats_frees_total counter
go_memstats_frees_total 55902
# HELP go_memstats_gc_cpu_fraction The fraction of this program's available CPU time used by the GC since the program started.
# TYPE go_memstats_gc_cpu_fraction gauge
go_memstats_gc_cpu_fraction 0.006749343011844481
# HELP go_memstats_gc_sys_bytes Number of bytes used for garbage collection system metadata.
# TYPE go_memstats_gc_sys_bytes gauge
go_memstats_gc_sys_bytes 5.56308e+06
# HELP go_memstats_heap_alloc_bytes Number of heap bytes allocated and still in use.
# TYPE go_memstats_heap_alloc_bytes gauge
go_memstats_heap_alloc_bytes 7.59352e+06
# HELP go_memstats_heap_idle_bytes Number of heap bytes waiting to be used.
# TYPE go_memstats_heap_idle_bytes gauge
go_memstats_heap_idle_bytes 9.969664e+06
# HELP go_memstats_heap_inuse_bytes Number of heap bytes that are in use.
# TYPE go_memstats_heap_inuse_bytes gauge
go_memstats_heap_inuse_bytes 9.95328e+06
# HELP go_memstats_heap_objects Number of allocated objects.
# TYPE go_memstats_heap_objects gauge
go_memstats_heap_objects 36311
# HELP go_memstats_heap_released_bytes Number of heap bytes released to OS.
# TYPE go_memstats_heap_released_bytes gauge
go_memstats_heap_released_bytes 7.74144e+06
# HELP go_memstats_heap_sys_bytes Number of heap bytes obtained from system.
# TYPE go_memstats_heap_sys_bytes gauge
go_memstats_heap_sys_bytes 1.9922944e+07
# HELP go_memstats_last_gc_time_seconds Number of seconds since 1970 of last garbage collection.
# TYPE go_memstats_last_gc_time_seconds gauge
go_memstats_last_gc_time_seconds 1.65847597911167e+09
# HELP go_memstats_lookups_total Total number of pointer lookups.
# TYPE go_memstats_lookups_total counter
go_memstats_lookups_total 0
# HELP go_memstats_mallocs_total Total number of mallocs.
# TYPE go_memstats_mallocs_total counter
go_memstats_mallocs_total 92213
# HELP go_memstats_mcache_inuse_bytes Number of bytes in use by mcache structures.
# TYPE go_memstats_mcache_inuse_bytes gauge
go_memstats_mcache_inuse_bytes 14400
# HELP go_memstats_mcache_sys_bytes Number of bytes used for mcache structures obtained from system.
# TYPE go_memstats_mcache_sys_bytes gauge
go_memstats_mcache_sys_bytes 16384
# HELP go_memstats_mspan_inuse_bytes Number of bytes in use by mspan structures.
# TYPE go_memstats_mspan_inuse_bytes gauge
go_memstats_mspan_inuse_bytes 201280
# HELP go_memstats_mspan_sys_bytes Number of bytes used for mspan structures obtained from system.
# TYPE go_memstats_mspan_sys_bytes gauge
go_memstats_mspan_sys_bytes 229376
# HELP go_memstats_next_gc_bytes Number of heap bytes when next garbage collection will take place.
# TYPE go_memstats_next_gc_bytes gauge
go_memstats_next_gc_bytes 1.11032e+07
# HELP go_memstats_other_sys_bytes Number of bytes used for other system allocations.
# TYPE go_memstats_other_sys_bytes gauge
go_memstats_other_sys_bytes 2.776443e+06
# HELP go_memstats_stack_inuse_bytes Number of bytes in use by the stack allocator.
# TYPE go_memstats_stack_inuse_bytes gauge
go_memstats_stack_inuse_bytes 1.048576e+06
# HELP go_memstats_stack_sys_bytes Number of bytes obtained from system for stack allocator.
# TYPE go_memstats_stack_sys_bytes gauge
go_memstats_stack_sys_bytes 1.048576e+06
# HELP go_memstats_sys_bytes Number of bytes obtained from system.
# TYPE go_memstats_sys_bytes gauge
go_memstats_sys_bytes 3.1015944e+07
# HELP go_threads Number of OS threads created.
# TYPE go_threads gauge
go_threads 18
# HELP process_cpu_seconds_total Total user and system CPU time spent in seconds.
# TYPE process_cpu_seconds_total counter
process_cpu_seconds_total 0.3
# HELP process_max_fds Maximum number of open file descriptors.
# TYPE process_max_fds gauge
process_max_fds 1.048576e+06
# HELP process_open_fds Number of open file descriptors.
# TYPE process_open_fds gauge
process_open_fds 13
# HELP process_resident_memory_bytes Resident memory size in bytes.
# TYPE process_resident_memory_bytes gauge
process_resident_memory_bytes 6.875136e+07
# HELP process_start_time_seconds Start time of the process since unix epoch in seconds.
# TYPE process_start_time_seconds gauge
process_start_time_seconds 1.65847597878e+09
# HELP process_virtual_memory_bytes Virtual memory size in bytes.
# TYPE process_virtual_memory_bytes gauge
process_virtual_memory_bytes 2.034847744e+09
# HELP process_virtual_memory_max_bytes Maximum amount of virtual memory available in bytes.
# TYPE process_virtual_memory_max_bytes gauge
process_virtual_memory_max_bytes 1.8446744073709552e+19
# HELP traefik_config_last_reload_failure Last config reload failure
# TYPE traefik_config_last_reload_failure gauge
traefik_config_last_reload_failure 0
# HELP traefik_config_last_reload_success Last config reload success
# TYPE traefik_config_last_reload_success gauge
traefik_config_last_reload_success 1.658475979e+09
# HELP traefik_config_reloads_failure_total Config failure reloads
# TYPE traefik_config_reloads_failure_total counter
traefik_config_reloads_failure_total 0
# HELP traefik_config_reloads_total Config reloads
# TYPE traefik_config_reloads_total counter
traefik_config_reloads_total 2
# HELP traefik_entrypoint_open_connections How many open connections exist on an entrypoint, partitioned by method and protocol.
# TYPE traefik_entrypoint_open_connections gauge
traefik_entrypoint_open_connections{entrypoint="traefik",method="GET",protocol="http"} 1
traefik_entrypoint_open_connections{entrypoint="web",method="GET",protocol="http"} 0
# HELP traefik_entrypoint_request_duration_seconds How long it took to process the request on an entrypoint, partitioned by status code, protocol, and method.
# TYPE traefik_entrypoint_request_duration_seconds histogram
traefik_entrypoint_request_duration_seconds_bucket{code="200",entrypoint="web",method="GET",protocol="http",le="0.1"} 1
traefik_entrypoint_request_duration_seconds_bucket{code="200",entrypoint="web",method="GET",protocol="http",le="0.3"} 1
traefik_entrypoint_request_duration_seconds_bucket{code="200",entrypoint="web",method="GET",protocol="http",le="1.2"} 1
traefik_entrypoint_request_duration_seconds_bucket{code="200",entrypoint="web",method="GET",protocol="http",le="5"} 1
traefik_entrypoint_request_duration_seconds_bucket{code="200",entrypoint="web",method="GET",protocol="http",le="+Inf"} 1
traefik_entrypoint_request_duration_seconds_sum{code="200",entrypoint="web",method="GET",protocol="http"} 0.001968505
traefik_entrypoint_request_duration_seconds_count{code="200",entrypoint="web",method="GET",protocol="http"} 1
# HELP traefik_entrypoint_requests_size FIXME2
# TYPE traefik_entrypoint_requests_size counter
traefik_entrypoint_requests_size{code="200",entrypoint="web",method="GET",protocol="http"} 398
# HELP traefik_entrypoint_requests_total How many HTTP requests processed on an entrypoint, partitioned by status code, protocol, and method.
# TYPE traefik_entrypoint_requests_total counter
traefik_entrypoint_requests_total{code="200",entrypoint="web",method="GET",protocol="http"} 1
# HELP traefik_router_open_connections How many open connections exist on a router, partitioned by service, method, and protocol.
# TYPE traefik_router_open_connections gauge
traefik_router_open_connections{method="GET",protocol="http",router="prometheus@internal",service="prometheus@internal"} 1
traefik_router_open_connections{method="GET",protocol="http",router="whoami@docker",service="infallible-heyrovsky@docker"} 0
# HELP traefik_router_request_duration_seconds How long it took to process the request on a router, partitioned by service, status code, protocol, and method.
# TYPE traefik_router_request_duration_seconds histogram
traefik_router_request_duration_seconds_bucket{code="200",method="GET",protocol="http",router="whoami@docker",service="infallible-heyrovsky@docker",le="0.1"} 1
traefik_router_request_duration_seconds_bucket{code="200",method="GET",protocol="http",router="whoami@docker",service="infallible-heyrovsky@docker",le="0.3"} 1
traefik_router_request_duration_seconds_bucket{code="200",method="GET",protocol="http",router="whoami@docker",service="infallible-heyrovsky@docker",le="1.2"} 1
traefik_router_request_duration_seconds_bucket{code="200",method="GET",protocol="http",router="whoami@docker",service="infallible-heyrovsky@docker",le="5"} 1
traefik_router_request_duration_seconds_bucket{code="200",method="GET",protocol="http",router="whoami@docker",service="infallible-heyrovsky@docker",le="+Inf"} 1
traefik_router_request_duration_seconds_sum{code="200",method="GET",protocol="http",router="whoami@docker",service="infallible-heyrovsky@docker"} 0.001877708
traefik_router_request_duration_seconds_count{code="200",method="GET",protocol="http",router="whoami@docker",service="infallible-heyrovsky@docker"} 1
# HELP traefik_router_requests_size FIXME4
# TYPE traefik_router_requests_size counter
traefik_router_requests_size{code="200",method="GET",protocol="http",router="whoami@docker",service="infallible-heyrovsky@docker"} 0
# HELP traefik_router_requests_total How many HTTP requests are processed on a router, partitioned by service, status code, protocol, and method.
# TYPE traefik_router_requests_total counter
traefik_router_requests_total{code="200",method="GET",protocol="http",router="whoami@docker",service="infallible-heyrovsky@docker"} 1
# HELP traefik_router_response_size FIXME3
# TYPE traefik_router_response_size counter
traefik_router_response_size{code="200",method="GET",protocol="http",router="whoami@docker",service="infallible-heyrovsky@docker"} 398
# HELP traefik_service_open_connections How many open connections exist on a service, partitioned by method and protocol.
# TYPE traefik_service_open_connections gauge
traefik_service_open_connections{method="GET",protocol="http",service="infallible-heyrovsky@docker"} 0
# HELP traefik_service_request_duration_seconds How long it took to process the request on a service, partitioned by status code, protocol, and method.
# TYPE traefik_service_request_duration_seconds histogram
traefik_service_request_duration_seconds_bucket{code="200",method="GET",protocol="http",service="infallible-heyrovsky@docker",le="0.1"} 1
traefik_service_request_duration_seconds_bucket{code="200",method="GET",protocol="http",service="infallible-heyrovsky@docker",le="0.3"} 1
traefik_service_request_duration_seconds_bucket{code="200",method="GET",protocol="http",service="infallible-heyrovsky@docker",le="1.2"} 1
traefik_service_request_duration_seconds_bucket{code="200",method="GET",protocol="http",service="infallible-heyrovsky@docker",le="5"} 1
traefik_service_request_duration_seconds_bucket{code="200",method="GET",protocol="http",service="infallible-heyrovsky@docker",le="+Inf"} 1
traefik_service_request_duration_seconds_sum{code="200",method="GET",protocol="http",service="infallible-heyrovsky@docker"} 0.001773469
traefik_service_request_duration_seconds_count{code="200",method="GET",protocol="http",service="infallible-heyrovsky@docker"} 1
# HELP traefik_service_requests_size FIXME6
# TYPE traefik_service_requests_size counter
traefik_service_requests_size{code="200",method="GET",protocol="http",service="infallible-heyrovsky@docker"} 0
# HELP traefik_service_requests_total How many HTTP requests processed on a service, partitioned by status code, protocol, and method.
# TYPE traefik_service_requests_total counter
traefik_service_requests_total{code="200",method="GET",protocol="http",service="infallible-heyrovsky@docker"} 1
# HELP traefik_service_response_size FIXME5
# TYPE traefik_service_response_size counter
traefik_service_response_size{code="200",method="GET",protocol="http",service="infallible-heyrovsky@docker"} 398
